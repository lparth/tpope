#!/bin/sh
# vim:set et sw=2:

# Provides a standard interface for sending commands to various media players.

unset IFS

mpris_list() {
  dbus-send --print-reply --dest=org.freedesktop.DBus / org.freedesktop.DBus.ListNames|grep '^ *string "org\.mpris\.MediaPlayer2\..*"'|sed -e 's/"$//' -e 's/.*"org\.mpris\.MediaPlayer2\.//'
}

mpris_get() {
  dbus-send --print-reply --reply-timeout=330 --dest="org.mpris.MediaPlayer2.$1" /org/mpris/MediaPlayer2 org.freedesktop.DBus.Properties.Get string:org.mpris.MediaPlayer2 string:"$2" | sed -ne '2,$p'
}

mpris_player_get() {
  dbus-send --print-reply --reply-timeout=330 --dest="org.mpris.MediaPlayer2.$1" /org/mpris/MediaPlayer2 org.freedesktop.DBus.Properties.Get string:org.mpris.MediaPlayer2.Player string:"$2" | sed -ne '2,$p'
}

normalize_rate() {
  echo $1 | sed -e 's/^+$/*1.0594631/' -e 's/^-$/*0.9438743/' -e 's/^$/1/'
}

mpris_player_change() {
  old=`mpris_player_get $1 $2 | tail -1 | sed -e 's/.* //'`
  arg=`echo $3|sed -e 's/%/*0.01/'`
  if [ -z "$4" ]; then
    case $arg in
      [-+*/]*) arg=`perl -e "print $old$arg"` ;;
      *) arg=`perl -e "print $arg"` ;;
    esac
  fi
  dbus-send --print-reply \
    --dest="org.mpris.MediaPlayer2.$dest" \
    /org/mpris/MediaPlayer2 org.freedesktop.DBus.Properties.Set \
    string:org.mpris.MediaPlayer2.Player \
    string:$2 \
    variant:${4-double}:$arg \
    >/dev/null 2>&1
}

mpris() {
  dest=$1
  shift
  case $1 in
    get) mpris_get $dest $2; return ;;
    player-get) mpris_player_get $dest $2; return ;;
    volume) mpris_player_change $dest Volume $2; return ;;
    rate)
      if [ "`mpris_player_get $dest MaximumRate`" = "`mpris_player_get $dest MinimumRate`" ]; then
        return 1
      else
        mpris_player_change $dest Rate `normalize_rate $2`
        return
      fi
      ;;
    quit) cmd=Quit ;;
    raise) cmd=Raise ;;
    stop) cmd=Player.Stop ;;
    play|resume)
      case `mpris_player_get $dest PlaybackStatus` in
        *Paused*) cmd=Player.PlayPause ;;
        *Playing*) return ;;
        *) cmd=Player.Play ;;
      esac
      ;;
    pause)
      case `mpris_player_get $dest PlaybackStatus` in
        *Paused*) return ;;
        *Stopped*) cmd=Player.Stop ;;
        *) cmd=Player.Pause ;;
      esac
      ;;
    toggle) cmd=Player.PlayPause ;;
    next) cmd=Player.Next ;;
    prev) cmd=Player.Previous ;;
    ffwd) cmd="Player.Seek int64:${2:-5}000000" ;;
    seek) cmd="Player.Seek int64:${2:--5}000000" ;;
    rew) cmd="Player.Seek int64:-${2:-5}000000" ;;
    *) cmd="$*" ;;
  esac
  dbus-send --print-reply --dest="org.mpris.MediaPlayer2.$dest" /org/mpris/MediaPlayer2 org.mpris.MediaPlayer2.$cmd >/dev/null
}

find_fifo() {
  IFS=`printf '\n'`
  fifo=`cat "$1" 2>/dev/null|grep '^include='|cut -d= -f 2-`
  fifo=`cat "$1" $fifo 2>/dev/null|grep '^input.*file='|head -1|sed -e 's/.*file=//' -e 's/:.*//'`
  unset IFS
  echo "$fifo"
}

mplayer_fifo() {
  if [ -z "$mplayer_did_fifo" ]; then
    mplayer_fifo=`find_fifo "$HOME/.mplayer/config"`
    mplayer_did_fifo=1
  fi
  echo "$mplayer_fifo"
}

mplayer_tell() {
  case "$1" in
    quit) echo quit ;;
    stop) echo stop ;;
    pause) echo frame_step ;;
    toggle) echo pause ;;
    play|resume) echo 'osd_show_text ""' ;;
    next) echo pt_step 1 ;;
    prev) echo pt_step -1 ;;
    seek) echo seek ${2:--15} ;;
    rate)
      rate=`normalize_rate $2`
      case $rate in
        [0-9]*) echo speed_set $rate ;;
        [+-]*) echo speed_incr $rate ;;
        [*]*) echo speed_mult $rate|sed -e 's/\*//' ;;
      esac
      ;;
    echo) shift; echo "$*" ;;
  esac
}

pid_host_status() {
  [ -n "$1" -a -n "$2" ] || return 1
  case `find_pulse sink-inputs $1 $2 Corked` in
    *no*) echo Playing ;;
    *yes*) echo Paused ;;
    *) echo Stopped ;;
  esac
}

mplayer_status() {
  pid_host_status `pgrep -ou "$LOGNAME" mplayer` `hostname`
}

if [ ! -f "$HOME/.config/mpv/scripts/mpris.so" ]; then

  mpv_fifo() {
    if [ -z "$mpv_did_fifo" ]; then
      mpv_fifo=`find_fifo "$HOME/.config/mpv/mpv.conf"`
      mpv_did_fifo=1
    fi
    echo "$mpv_fifo"
  }

  mpv_tell() {
    case "$1" in
      quit) echo quit ;;
      stop) echo stop ;;
      pause) echo set pause yes; echo frame_step ;;
      toggle) echo speed_set 1; echo 'osd_show_text ""'; echo pause ;;
      play|resume) echo pausing speed_set 1; echo 'osd_show_text ""'; echo pause ;;
      next) echo pt_step 1 ;;
      prev) echo pt_step -1 ;;
      seek) echo seek ${2:--15} ;;
      rate)
        rate=`normalize_rate $2`
        case $rate in
          [0-9]*) echo speed_set $rate ;;
          [+-]*) echo speed_incr $rate ;;
          [*]*) echo speed_mult $rate|sed -e 's/\*//' ;;
        esac
        ;;
      echo) shift; echo "$*" ;;
    esac >> "`mpv_fifo`"
  }

  mpv_status() {
    pid_host_status `pgrep -ou "$LOGNAME" mpv` `hostname`
  }

else

  mpv_fifo() {
    :
  }

fi

cdcd_tell() {
  case "$1" in
    quit) cdcd open ;;
    stop) cdcd stop ;;
    pause) cdcd pause ;;
    resume) cdcd resume ;;
    next) cdcd next ;;
    prev) cdcd prev ;;
    seek)
      case "$2" in
        -*) cdcd rew `echo $2|sed -e 's/^-//'` ;;
        *) cdcd ff `echo $2|sed -e 's/^+//'` ;;
      esac
      ;;
    play|toggle)
      if cdcd status 2>/dev/null|grep Playing >/dev/null; then
        cdcd pause
      elif cdcd status 2>/dev/null|grep Paused >/dev/null; then
        cdcd resume
      else
        cdcd play
      fi ;;
    *) return 1 ;;
  esac
}

cdcd_status() {
  cdcd status 2>/dev/null
}

list() {
  mpris_list=`mpris_list`
  echo "$mpris_list"|grep -v '^chrom'
  echo "$mpris_list"|grep '^chrom'
  if pgrep -u "$LOGNAME" mpv >/dev/null && [ -p "`mpv_fifo`" ]; then
    echo mpv
  fi
  if pgrep -u "$LOGNAME" mplayer >/dev/null && [ -p "`mplayer_fifo`" ]; then
    echo mplayer
  fi
  if [ -x "/usr/bin/cdcd" ]; then
    [ -f "$HOME/.cdcdrc" ] || echo "device=/dev/cdrom" > "$HOME/.cdcdrc"
    status=`cdcd status 2>/dev/null`
    if [ -n "$status" -a "$status" != "No disc in drive" ]; then
      echo cdcd
    fi
  fi
}

find_pulse() {
  pid=$2
  host=$3
  if [ "x$pid" = "x--current" ]; then
    w=`xprop -root _NET_ACTIVE_WINDOW | sed -e 's/.*# //'`
    pid=`xprop -id $w _NET_WM_PID | sed -e 's/.*= //'`
    host=`xprop -id $w WM_CLIENT_MACHINE | cut -s -d '"' -f 2`
  fi
  [ -n "$host" ] || host=`hostname`
  pactl list $1 | while read line; do
    case "$line" in
      *\#*[0-9]) id=`echo $line | sed -e 's/.*#//'` ;;
      $4:*) extra=`echo $line |sed -e 's/.*: //'` ;;
      "application.process.host = \"$host\"") [ -z "$foundpid" ] || echo $id $extra ;;
      "application.process.id = \"$pid\"") foundpid=1 ;;
      "application.process.id = "*) foundpid= ;;
    esac
  done
}

list_pulse() {
  tmpname=`mktemp`
  trap "rm -f $tmpname" EXIT INT TERM
  pactl list "${1}s" > "$tmpname"
  while read line; do
    case $line in
      "Source "*|"Sink "*)
        if [ -n "$name" -a -z "$not_avail" -o -n "$force_avail" ]; then
          printf '%s\t%s\n' "$id" "$name"
        fi
        ports=
        not_avail=
        force_avail=
        name=
        id=`echo "$line"|sed -e 's/.*#//'`
        ;;
      Name:*.monitor|Name:.*module-combine-sink.c) ;;
      Name:*)
        name=`echo "$line"|sed -e 's/^Name: *//'`
        ;;
      Ports:*) ports=1 ;;
      "["*"not available"*) [ -n "$ports" ] && not_avail=1 ;;
      "["*) [ -n "$ports" ] && force_avail=1 ;;
      *) ports= ;;
    esac
  done < "$tmpname"
  rm -f "$tmpname"
  if [ -n "$name" -a -z "$not_avail" -o -n "$force_avail" ]; then
    printf '%s\t%s\n' "$id" "$name"
  fi
}

tell() {
  if type "${1}_tell" >/dev/null 2>&1; then
    prog=$1
    shift
    ${prog}_tell "$@"
  else
    mpris "$@"
  fi
}

status() {
  if type "${1}_status" >/dev/null 2>&1; then
    ${1}_status
  else
    mpris_player_get "$1" PlaybackStatus | sed -e 's/"$//' -e 's/.*"//'
  fi
}

[ $# -gt 0 ] || set -- list

sounds=/usr/share/sounds/freedesktop/stereo

sound() {
  out=$2
  if [ $1 = source ]; then
    out=`list_pulse source|awk '$1 == "'$out'" { print $2 }'|sed -e 's/_input/_output/' -e 's/\.[^.]*$//'`
    out=`list_pulse sink|grep "	$out"|cut -f1|head -1`
    [ -n "$out" ] || return
  fi
  shift 2
  [ -n "$quiet" ] || paplay -d "$out" "$@"
}

while getopts q o; do
  case $o in
    q) quiet=1 ;;
    \?) exit 2 ;;
  esac
done

shift `expr $OPTIND - 1`

cmd=$1
shift

case $cmd in

  list)
    if [ $# -eq 0 ]; then
      for prog in `list`; do
        echo $prog `status $prog`
      done
      exit 0
    fi
    ;;

  tell)
    target=$1
    shift
    status=1
    for prog in `list|egrep "^($target)$"`; do
      tell "$prog" "$@"
      status=0
    done
    exit $status
    ;;

  pause)
    status=1
    list=`list`
    for prog in $list; do
      case `status $prog` in
        Stopped)
          tell $prog stop ;;
        Playing)
          tell $prog pause ;;
      esac
      status=0
    done
    exit $status
    ;;

  activate)
    for prog in `list`; do
      name=`echo $prog|sed -e 's/\.instance[0-9]*$//'`
      case `status $prog` in
        Playing) wmctrl -x -a $name && exit 0 ;;
        Paused) paused="$paused $name" ;;
        *) stopped="$stopped $name" ;;
      esac
    done
    for prog in $paused $stopped; do
      wmctrl -x -a $prog && exit 0
    done
    exit 1
    ;;

  toggle|play|resume|stop|next|prev|seek|volume|rate|raise|quit|get|player-get)
    for prog in `list`; do
      case `status $prog` in
        Playing) tell $prog "$cmd" "$@" && exit 0 ;;
        Paused) paused="$paused $prog" ;;
        *) stopped="$stopped $prog" ;;
      esac
    done
    for prog in $paused $stopped; do
      tell $prog "$cmd" "$@" && exit 0
    done
    exit 1
    ;;

  sink|source)
    caps=`echo $cmd|sed -e 's/^./\u&/'`
    puttype=sink-input
    [ sink = "$cmd" ] || puttype=source-output
    hostname=${3:-`hostname`}
    if [ -n "$2" -a --default != "$2" ]; then
      current=`find_pulse ${puttype}s $2 $hostname $caps | awk 'NR == 1 { print $2 }'`
    fi
    if [ -z "$current" ]; then
      default=`pactl info|awk "/Default $caps:/ { print \\\$3 }"`
      default=`pactl list short ${cmd}s | awk -v c="$default" '$2 == c { print $1 }'`
    fi
    if [ list = "$1" ]; then
      [ -n "$2" ] || current=$default
      [ -n "$current" ] || exit 1
      pactl list "${cmd}s" | while read label content; do
        case $label in
          Sink|Source)
            [ "#$current" != "$content" ]
            printf '%s\t' $?
            ;;
          Name:) printf '%s\t' "$content" ;;
          Description:) echo "$content" ;;
        esac
      done
    exit
    fi
    [ -n "$current" ] || current=${default:-0}
    case $1 in
      toggle|on|off)
        type=`echo $1|sed -e 's/on/0/' -e 's/off/1/'`
        if [ -n "$2" ]; then
          for si in `find_pulse ${puttype}s $2 $3`; do
            pactl set-$puttype-mute $si $type
          done
          exit 0
        fi
        for id in `list_pulse $cmd | cut -f1`; do
          pactl set-$cmd-mute $id $type
        done
        exit 0
      ;;
      *%|*dB|[0-9]*.*)
        volume=`echo $1|sed -e 's/^\(.*\)\([+-]\)$/\2\1/'`
        if [ -n "$2" ]; then
          for si in `find_pulse ${puttype}s $2 $3`; do
            pactl set-$puttype-volume $si $volume
          done
          exit 0
        fi
        for id in `list_pulse $cmd | cut -f1`; do
          pactl set-$cmd-volume $id $volume
          [ $cmd = source ] || sound $cmd $id "$sounds/audio-volume-change.oga" &
        done
        exit 0
        ;;
      current) target=$current ;;
      next)
        for id in `list_pulse $cmd | cut -f1`; do
          if [ $current = $id ]; then
            next=1
          elif [ -n "$next" ]; then
            next=
            target=$id
          fi
        done
        [ -n "$target" ] || target=`list_pulse $cmd | head -1 | cut -f1`
        ;;
      prev)
        for id in `list_pulse $cmd | cut -f1`; do
          if [ $current = $id ]; then
            target=$last
          fi
          last=$id
        done
        [ -n "$target" ] || target=`list_pulse $cmd | tail -1 | cut -f1`
        ;;
      *)
        target=$1
        ;;
    esac
    if [ --default = "$2" ]; then
      pactl set-default-$cmd $target
    elif [ -n "$2" ]; then
      for put in `find_pulse ${puttype}s $2 $hostname`; do
        pactl move-$puttype $put $target
      done
    else
      pactl set-default-$cmd $target
      for put in `pactl list short ${puttype}s | cut -f1`; do
        pactl move-$puttype $put $target 2>/dev/null
      done
    fi
    [ source = "$cmd" ] || sound $cmd $target "$sounds/bell.oga"
    ;;

  *)
    echo "$0: unknown action $cmd" >&2
    exit 2
    ;;
esac
