#!/bin/sh
# vim:set et sw=2:

# Handles everything to do with hostnames, particularly colorizing them in
# shell prompts.

name() {
  if [ -n "$COMPUTERNAME" ]; then
    # Windows
    echo "$COMPUTERNAME"
  elif [ -r /proc/sys/kernel/hostname ]; then
    cat /proc/sys/kernel/hostname
  else
    hostname | cut -d. -f1
  fi
}

awkhost='
 $1 == "Host" {
   me = 0;
   for (i=2;i<=NF;i++) {
     gsub(/[][().+^$]/, "\\\\&", $i);
     gsub(/[?]/, ".", $i);
     gsub(/[*]/, ".*", $i);
     if (host ~ "^" $i "$")
       me = 1
   }
 }
'

normalize() {
  if [ localhost = "$1" -o - = "$1" -o -z "$1" ]; then
    name
  else
    echo "$1"
  fi
}

for AWK in $AWK gawk nawk mawk awk; do
  if type $AWK >/dev/null 2>&1; then
    break
  fi
done

lookup() {
  $AWK "$awkhost"' me && $1 == "'"$2"'" { printf("%s", $2); for(i=3;i<=NF;i++) printf(" %s",$i); print(""); fail=0; exit } END { exit fail }' \
    fail=1 host="`normalize "$1"`" "$HOME/.ssh/config"
}

getfullname() {
  lookup "$1" HostName || echo "$1"
}

getcolor() {
  lookup "$1" '#Color' || echo white
}

red()         { hterm="00;31";hlrgb="#D47F7F";hdrgb="#550000";}
green()       { hterm="00;32";hlrgb="#7FD47F";hdrgb="#005500";}
brown()       { hterm="00;33";hlrgb="#D4AA7F";hdrgb="#552b00";}
navy()        { hterm="00;34";hlrgb="#7F7FFF";hdrgb="#000080";}
purple()      { hterm="00;35";hlrgb="#D47FD4";hdrgb="#550055";}
teal()        { hterm="00;36";hlrgb="#7FD4D4";hdrgb="#005555";}
grey()        { hterm="00;90";hlrgb="#BCBBBB";hdrgb="#3d3c3c";}
orange()      { hterm="00;91";hlrgb="#FFA1A1";hdrgb="#802222";}
lime()        { hterm="00;92";hlrgb="#A2FFA1";hdrgb="#238022";}
yellow()      { hterm="00;93";hlrgb="#FFFF7F";hdrgb="#808000";}
blue()        { hterm="00;94";hlrgb="#A2A2FF";hdrgb="#232380";}
magenta()     { hterm="00;95";hlrgb="#FF7FFF";hdrgb="#800080";}
cyan()        { hterm="00;96";hlrgb="#7FFFFF";hdrgb="#008080";}
white()       { hterm="00;97";hlrgb="#FFFFFF";hdrgb="#808080";}

[ $# -gt 0 ] || exit 1

command="$1"
shift

case "$command" in
  name) # hosts
    getfullname $1|cut -d. -f1; exit 0 ;;
  ansi) # hosts
    `getcolor "$1"`
    echo $hterm; exit 0 ;;
  color) # hosts
    getcolor "$1"
    ;;
  letter) # hosts
    awk -v host="${1:-`name`}" "$awkhost"'me && $1 == "Host" && length($2) == 1 { print $2; exit }' "$HOME/.ssh/config"
    ;;
  rgb|light) # hosts
    `getcolor "$1"`
    echo $hlrgb
    ;;
  dark) # hosts
    `getcolor "$1"`
    echo $hdrgb
    ;;

  shell|ssh) # ssh
    if [ $# = 1 -a localhost = "$1" ]; then
      exec "$SHELL"
    elif [ localhost = "$1" ]; then
      exec "$SHELL" -c 'exec "$@"' "$@"
    else
      exec ssh -t "$@"
    fi
    ;;

  dispatch|batch-ssh) # ssh
    exec ssh -axqoBatchmode=yes -oSetupTimeOut=30 "$@"
    ;;

  screen|screen-ssh) # hosts
    case "$1" in
      -*[Rr]*) resume="$1 `name`"; shift ;;
    esac
    case "$1" in
      localhost|-)
        shift
        exec tpope screen $resume "$@" ;;
      -*|'')
        exec tpope screen $resume "$@" ;;
    esac
    host="$1"
    shift
    exec ssh -t "$host" "[ -x .local/bin/tpope ] && exec .local/bin/tpope screen $resume $*; exec screen $resume $*"
    ;;


  mux) # hosts
    mux=mux
    if [ "x$1" = x-s ]; then
      mux='mux -s'
      shift
    fi
    if [ -n "$TMUX" ]; then
      mux='mux -s'
    fi
    if [ "x$1" = x-d ]; then
      detach=-d
      shift
    fi
    case "$1" in
      ''|-) host=localhost ;;
      *:*)
        host=`echo "$1"|sed -e 's/:.*//'`
        dir=`echo "$1"|sed -e 's/[^:]*://'`
        ;;
      *) host="$1" ;;
    esac
    [ "$#" = 0 ] || shift
    if [ "x$1" = x-d ]; then
      detach=-d
      shift
    fi
    [ -n "$dir" ] || dir=.
    [ -n "$1" ] || set -- `name`
    if [ localhost = "$host" ]; then
      cd "$HOME"
      cd "$dir"

      case "$TERM" in
        screen*|xterm*|rxvt*)
          printf '\033]1;%s\007' "$1" ;;
      esac

      if [ mux = "$mux" ] && type tmux >/dev/null 2>&1; then
        if tmux has-session -t "$1" 2>/dev/null; then
          exec tmux attach-session $detach -t "$1"
        else
          exec tmux new-session -s "$1"
        fi
      elif type screen >/dev/null 2>&1; then
        exec screen ${detach--x}RR "$1"
      else
        echo "Warning: no multiplexor" >&2
        exec $SHELL
      fi
    fi
    sandbox="https://tpo.pe/sandbox"
    exec ssh -t "$host" "[ -x \"\$HOME/.local/bin/tpope\" ] && exec \"\$HOME/.local/bin/tpope\" host $mux 'localhost:$dir' $*; cd '$dir' || exit 3; if [ -x /usr/bin/wget ]; then wget -qO- $sandbox; elif [ -x /usr/bin/curl ]; then curl -sS $sandbox; else echo Welp >&2; fi|exec sh -"
    ;;

  tunnel) # hosts
    fullname="`getfullname "$1"`"
    domain="`echo "$fullname"|cut -d. -f 2-`"
    case "`cat /etc/resolv.conf 2>/dev/null`" in
      *$domain\ *|*$domain)
        [ ! -x "`which nc 2>/dev/null`" ] || exec nc "$fullname" "$2"
      ;;
    esac
    cmd="`lookup $fullname ProxyCommand || echo none`"
    case "$cmd" in
      none|*tpope?host*)
        exec nc "$fullname" "$2"
        ;;
      *)
        exec `echo "$cmd"|sed -e s/%h/$fullname/ -e s/%p/$2/`
        ;;
    esac
    ;;

  list) # nothing
    awk '$1 == "HostName" { print $2 }' "$HOME/.ssh/config" | cut -d. -f1
    exit 0
    ;;

  *)
    echo "`basename "$0"` $1: unknown command." >&2
    exit 1
    ;;

esac
